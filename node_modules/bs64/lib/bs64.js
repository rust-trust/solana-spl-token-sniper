!function(globals) {
'use strict'

var base64 = {} //exports

var convertString = null

if (typeof module !== 'undefined' && module.exports) { //CommonJS
  module.exports = base64
  convertString = require('convert-string')
} else {
  globals.bs64 = base64
  convertString = globals.convertString
}

var base64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

base64.encode = function(input) {
  var bytes = null
  if (typeof input == 'string')
    bytes = convertString.UTF8.stringToBytes(input)
  else if (Array.isArray(input))
    bytes = input
  else
    throw new Error('Invalid input. Must be a string or an array of bytes.')

  // Use browser-native function if it exists, NOPE: doesn't support outside of latin range. Lame.
  //if (typeof btoa == "function") return btoa(convertString.UTF8.bytesToString(bytes)); 

  for(var base64 = [], i = 0; i < bytes.length; i += 3) {
    var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
    for (var j = 0; j < 4; j++) {
      if (i * 8 + j * 6 <= bytes.length * 8)
        base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
      else base64.push("=");
    }
  }

  return base64.join("");
}

base64.decode = function(str) {
  if (typeof str != 'string') throw new Error('Invalid input. Must be a string.')

  // Use browser-native function if it exists, NOPE: ONLY LATIN CHARS, Lame
  //if (typeof atob == "function") return Binary.stringToBytes(atob(base64));

  var bytes = []

  // Remove non-base-64 characters
  var base64 = str.replace(/[^A-Z0-9+\/]/ig, "");

  for (var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4) {
    if (imod4 == 0) continue;
    bytes.push(((base64map.indexOf(base64.charAt(i - 1)) & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2)) |
                     (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
  }

  return bytes;
}



}(this);